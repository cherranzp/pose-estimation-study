name: "VGG_ILSVRC_16_layers_3Dplus"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  top: 'gt_azimuths'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 13"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param { lr_mult: 0.0 }
  param { lr_mult: 0.0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 0.0 }
  param { lr_mult: 0.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 0.0 }
  param { lr_mult: 0.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
#  top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

#layer {
#  name: 'debug-data'
#  type: 'Python'
#  bottom: 'data'
#  bottom: 'rpn_rois'
#  bottom: 'rpn_scores'
#  python_param {
#    module: 'rpn.debug_layer'
#    layer: 'RPNDebugLayer'
#  }
#}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  bottom: 'gt_azimuths'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  top: 'continuous_azimuths'
  top: 'pose_inside_weights'
  top: 'pose_outside_weights'
  top: 'discrete_azimuths'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 13"
  }
}

#========= RCNN ============

layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_3Dplus"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score_3Dplus"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 13
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred_3Dplus"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred_3Dplus"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 52
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "pose_pred_3Dplus"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_pred_3Dplus"
  param {
    lr_mult: 0.01
  }
  param {
    lr_mult: 0.02
  }
  inner_product_param {
    num_output: 26
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score_3Dplus"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}

layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred_3Dplus"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}

################################################################################
#                                   POSE LAYERS                                #
################################################################################


# CONTINUOUS POSE LAYERS
layer {
  name: "loss_pose"
  type: "SmoothL1Loss"
  bottom: "pose_pred_3Dplus"
  bottom: "continuous_azimuths"
  bottom: "pose_inside_weights"
  bottom: "pose_outside_weights"
  top: "loss_pose"
  loss_weight: 1
}

# layer {
#   name: "loss_pose"
#   type: "Python"
#   bottom: "pose_pred_3Dplus"
#   bottom: "continuous_azimuths"  # Pose label
#   bottom: "labels"  	     # Class label
#   top: "loss_pose"
#     python_param {
#     module: "pose_loss_layer.layer"
#    layer: "PoseLossLayer"
#     layer: "PoseLossLayer"
#   }
#   loss_weight: 1
# }

# DISCRETE POSE LAYERS

layer {
  name: 'pose-label-generator'
  type: 'Python'
  bottom: 'labels'
  bottom: 'discrete_azimuths'
  top: "pose_label_1"
  top: "pose_label_2"
  top: "pose_label_3"
  top: "pose_label_4"
  top: "pose_label_5"
  top: "pose_label_6"
  top: "pose_label_7"
  top: "pose_label_8"
  top: "pose_label_9"
  top: "pose_label_10"
  top: "pose_label_11"
  top: "pose_label_12"
  python_param {
    module: 'rpn.pose_label_generator'
    layer: 'PoseLabelGenerator'
  }
}
#                       1
layer {
  name: "pose_score_1"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_1"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_1"
  bottom: "pose_label_1"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_1"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       2
layer {
  name: "pose_score_2"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_2"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_2"
  bottom: "pose_label_2"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_2"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       3
layer {
  name: "pose_score_3"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_3"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_3"
  bottom: "pose_label_3"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_3"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       4
layer {
  name: "pose_score_4"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_4"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_4"
  bottom: "pose_label_4"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_4"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       5
layer {
  name: "pose_score_5"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_5"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_5"
  bottom: "pose_label_5"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_5"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       6
layer {
  name: "pose_score_6"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_6"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_6"
  bottom: "pose_label_6"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_6"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       7
layer {
  name: "pose_score_7"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_7"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_7"
  bottom: "pose_label_7"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_7"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       8
layer {
  name: "pose_score_8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_8"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_8"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_8"
  bottom: "pose_label_8"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_8"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       9
layer {
  name: "pose_score_9"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_9"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_9"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_9"
  bottom: "pose_label_9"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_9"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       10
layer {
  name: "pose_score_10"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_10"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_10"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_10"
  bottom: "pose_label_10"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_10"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       11
layer {
  name: "pose_score_11"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_11"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_11"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_11"
  bottom: "pose_label_11"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_11"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}
#                       12
layer {
  name: "pose_score_12"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pose_score_12"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 360
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pose_12"
  type: "SoftmaxWithLoss"
  bottom: "pose_score_12"
  bottom: "pose_label_12"  # Pose label
  propagate_down: 1
  propagate_down: 0
  top: "loss_pose_12"
  
  loss_param {
    ignore_label: -1
    normalize: true
  }
  loss_weight: 1.0
}


